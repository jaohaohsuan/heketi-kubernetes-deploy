---
apiVersion: v1
kind: ConfigMap
metadata:
  name: deploy-heketi
data:
  deploy-heketi: |-
    #!/bin/bash -e

    # while [ ! -f /var/heketi/manifests/heketi-storage.json ]
    # do
    #   sleep 2
    #   echo -n "waiting for '/var/heketi/manifests/heketi-storage.json'"
    # done
    kubectl apply -f /var/heketi/manifests/heketi-storage.json
    kubectl delete all,service,jobs,deployment,secret --selector="deploy-heketi"
    kubectl apply -f /opt/bin/heketi-deployment.yaml

  heketi-deployment.yaml: |-
    ---
    kind: Service
    apiVersion: v1
    metadata:
      name: heketi
      labels:
        glusterfs: heketi-service
        deploy-heketi: support
      annotations:
        description: Exposes Heketi Service
    spec:
      selector:
        name: heketi
      ports:
      - name: heketi
        port: 8080
        targetPort: 8080
    ---
    kind: Deployment
    apiVersion: extensions/v1beta1
    metadata:
      name: heketi
      labels:
        glusterfs: heketi-deployment
      annotations:
        description: Defines how to deploy Heketi
    spec:
      replicas: 1
      template:
        metadata:
          name: heketi
          labels:
            name: heketi
            glusterfs: heketi-pod
        spec:
          serviceAccountName: heketi-service-account
          containers:
          - image: heketi/heketi:dev
            imagePullPolicy: Always
            name: heketi
            env:
            - name: HEKETI_EXECUTOR
              value: kubernetes
            - name: HEKETI_KUBE_USE_SECRET
              value: "y"
            - name: HEKETI_FSTAB
              value: "/var/lib/heketi/fstab"
            - name: HEKETI_SNAPSHOT_LIMIT
              value: '14'
            - name: HEKETI_KUBE_GLUSTER_DAEMONSET
              value: "y"
            ports:
            - containerPort: 8080
            volumeMounts:
            - name: db
              mountPath: "/var/lib/heketi"
            readinessProbe:
              timeoutSeconds: 3
              initialDelaySeconds: 3
              httpGet:
                path: "/hello"
                port: 8080
            livenessProbe:
              timeoutSeconds: 3
              initialDelaySeconds: 30
              httpGet:
                path: "/hello"
                port: 8080
          volumes:
          - name: db
            glusterfs:
              endpoints: heketi-storage-endpoints
              path: heketidbstorage
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: heketi-topology
data:
  provision: |-
    #!/bin/bash -e
    KUBE_TOKEN=$(</var/run/secrets/kubernetes.io/serviceaccount/token)
    json_raw=`curl -sSk -H "Authorization: Bearer $KUBE_TOKEN" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/nodes?labelSelector=storagenode=glusterfs`

    echo $(python3 - <<END
    import sys
    import json
    import argparse
    import os

    raw = $json_raw

    def getAddrWithType(dic, t):
        return next((x for x in dic['status']['addresses'] if x['type'] == t))['address']

    if __name__ == '__main__':

        devices = ['/dev/sdb']
        topo = { 'clusters': [ { 'nodes': [] } ] }

        for item in raw['items']:
            ipv4 = getAddrWithType(item, 'LegacyHostIP')
            hostname = getAddrWithType(item, 'Hostname')
            node = {
              'node': {
                'hostnames': {
                  'manage' : [ ipv4 ] ,
                  'storage': [ hostname ]
                },
                'zone': 1
              },
             'devices': devices
            }
            topo['clusters'][0]['nodes'].append(node)
        print(json.dumps(topo))
    END
    ) > /topology.json

    heketi-cli topology load --json=/topology.json 
    heketi-cli setup-openshift-heketi-storage
    if [[ ${?} == 0 ]]; then
      cp /heketi-storage.json /var/heketi/manifests/
    fi  
